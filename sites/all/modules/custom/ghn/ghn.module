<?php
/**
 * Menu alter 
 **/
function ghn_menu_alter(&$items) {
         global $user;
}
/**
 * Form alter 
 **/
function ghn_form_alter(&$form,&$form_state,$form_id) {
         $form['options']['status']['#value'] = 1;
/*
$form['body']['und'][0]['format']['guidelines']['#access'] = FALSE;
$form['body']['und'][0]['format']['help']['#access'] =FALSE;
*/
         switch($form_id) {
               case "user_register_form":
                    //krumo($form['submit']);
                    break;
               case "mailchimp_lists_user_subscribe_form_newletter":
//krumo($form['submit']);
$form['submit']['#value'] = 'Join';
unset($form['mailchimp_lists']['mailchimp_newletter']['mergevars']['FNAME']);
unset($form['mailchimp_lists']['mailchimp_newletter']['mergevars']['LNAME']);
                    break;
               case "medical_mission_node_form":
                      if (is_numeric(arg(1))):
                         $form['field_host_town']['und']['#disabled'] = TRUE;
                         $form['field_host_country']['und']['#disabled'] = TRUE;
                         $form['field_mm_type_of_mission']['und']['#disabled'] = TRUE;
                         $form['field_clinical_services_choices']['und']['#disabled'] = TRUE;
                         $form['field_patient_type']['und']['#disabled'] = TRUE;
                      endif;
               case "need_post_node_form":
                      if (is_numeric(arg(1))):
                         $form['field_post_service']['und']['#disabled'] = TRUE;
                         $form['field_post_country']['und']['#disabled'] = TRUE;
                         $form['field_patient_type']['und']['#disabled'] = TRUE;
                         $form['field_clinical_services_choices']['und']['#disabled'] = TRUE;
                         $form['field_equipment_choices']['und']['#disabled'] = TRUE;
                         $form['field_education_choices']['und']['#disabled'] = TRUE;
                         $form['field_funding_choices']['und']['#disabled'] = TRUE;
                         $form['field_volunteer_choices']['und']['#disabled'] = TRUE;
                         $form['field_medical_1st_level_subcateg']['und']['#disabled'] = TRUE;
                         $form['field_registered_nurse_choices']['und']['#disabled'] = TRUE;
                         $form['field_doctor_choices']['und']['#disabled'] = TRUE;
                         $form['field_cardiologist_choices']['und']['#disabled'] = TRUE;
                         $form['field_surgeons_choices']['und']['#disabled'] = TRUE;
                         $form['field_pharmacist_choices']['und']['#disabled'] = TRUE;
                         $form['field_perfusionists_choices']['und']['#disabled'] = TRUE;
                         $form['field_non_medical_choices']['und']['#disabled'] = TRUE;
                         $form['field_post_country']['und']['#disabled'] = TRUE;
                      endif;
$tmp = var_export($form,TRUE);
//drupal_set_message($existingnode);
                      array_push($form['#submit'],'ghn_post_submit');  
                      break;
               case "resource_post_node_form":
                      global $user;
                      $uid = $user->uid;
// get all the affiliations for this user
                      $options = $form['field_affiliations']['und']['#options'];
                      $results = db_query("SELECT a.field_affiliations_value AS affiliation FROM {field_data_field_affiliations} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $uid");
                      foreach ($options AS $option => $value) {
                              $default[$option] = TRUE;
                      }
                      foreach ($results AS $result) {
                              foreach ($options AS $option => $value) {
                                      if ($option == $result->affiliation) {
                                         $default[$option] = FALSE;
                                      }
                              }
                      }
                      foreach ($default AS $option => $value) {
                              if ($value) {
                                 unset($form['field_affiliations']['und']['#options'][$option]);
                              }
                      }
                      if (is_numeric(arg(1))):
                         $options = $form['field_affiliations']['und']['#options'];
                         foreach ($options AS $option => $value) {
                                 $default[$option] = TRUE;
                         }
                         $form['field_post_service']['und']['#disabled'] = TRUE;
                         $form['field_post_country']['und']['#disabled'] = TRUE;
                         $form['field_patient_type']['und']['#disabled'] = TRUE;
                         $form['field_clinical_services_choices']['und']['#disabled'] = TRUE;
                         $form['field_equipment_choices']['und']['#disabled'] = TRUE;
                         $form['field_education_choices']['und']['#disabled'] = TRUE;
                         $form['field_funding_choices']['und']['#disabled'] = TRUE;
                         $form['field_volunteer_choices']['und']['#disabled'] = TRUE;
                         $form['field_medical_1st_level_subcateg']['und']['#disabled'] = TRUE;
                         $form['field_registered_nurse_choices']['und']['#disabled'] = TRUE;
                         $form['field_doctor_choices']['und']['#disabled'] = TRUE;
                         $form['field_cardiologist_choices']['und']['#disabled'] = TRUE;
                         $form['field_surgeons_choices']['und']['#disabled'] = TRUE;
                         $form['field_pharmacist_choices']['und']['#disabled'] = TRUE;
                         $form['field_perfusionists_choices']['und']['#disabled'] = TRUE;
                         $form['field_non_medical_choices']['und']['#disabled'] = TRUE;
                         $form['field_post_country']['und']['#disabled'] = TRUE;
                         $form['field_affiliations']['und']['#disabled'] = TRUE;
                      endif;
                    $original = array_shift($form['actions']['submit']['#submit']);
                    $form['actions']['submit']['#submit'][]='ghn_node_submit';
                    $form['actions']['submit']['#submit'][]=$original;
                    break;
               case "user_login":
                    //array_push($form['#submit'],'ghn_user_submit');
                    break;
               case "user_profile_form":
                    array_push($form['#submit'],'ghn_user_submit');
                    break;
               case "profile2_edit_general_form":
                    array_push($form['#submit'],'ghn_user_submit');
                    break;
               case "profile2_edit_affiliations_form":
                    array_push($form['#submit'],'ghn_user_submit');
                    break;
         }
}
/**
 * redirecting node form submission 
 **/
function ghn_node_submit(&$form,&$form_state) {
   global $user;
   //$tmp = var_export($form_state['redirect'], TRUE);
   //drupal_set_message($tmp);
   foreach ($form_state AS $keys => $value) {
if ($keys == 'type') {
}
      if ($keys == "type") {
         switch ($value['#value']) {
              case "resource_post":
                    //drupal_set_message("Your Resource Posting was updated");
                    break;
          }
      }
    }
}
/**
 * redirecting user login form submission 
 **/
function ghn_user_submit(&$form,&$form_state) {
         global $user;
         $form_state['redirect'] = 'dashboard/'.$user->uid;
}
/**
 * hook_menu
 **/
function ghn_menu() {
    $items['main-profile'] = array(
        'page callback' => '_profile2_main_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
/*
    $items['affiliations/%'] = array(
        'page callback' => '_ghn_user_affiliations',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
*/
    $items['general-profile'] = array(
        'page callback' => '_profile2_general_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['affiliations-profile'] = array(
        'page callback' => '_profile2_affiliations_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['detail-profile'] = array(
        'page callback' => '_profile2_detail_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['dashboard/%'] = array(
        'page callback' => '_ghn_user_dashboard',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['match/%/%/%'] = array(
        'page callback' => '_ghn_match_page',
        'page arguments' => array(1,2,3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}
/**
 * profile2 is not registering profile pages with the menu
 * this is the hack for it, so page existing manager can find it 
 * for panels consumption
 **/
function _profile2_main_form() {
    global $user;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $profile2 = profile2_by_uid_load($user->uid, 'main');
    $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
    return $entity_form;    
}
function _profile2_general_form() {
    global $user;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $profile2 = profile2_by_uid_load($user->uid, 'general');
    $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
    return $entity_form;    
}
function _profile2_affiliations_form() {
    global $user;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $profile2 = profile2_by_uid_load($user->uid, 'affiliations');
    $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
    return $entity_form;    
}
function _profile2_detail_form() {
    global $user;
    $uid = $user->uid;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $results = db_query("SELECT field_choose_membership_type_registration_type AS memtype FROM {field_data_field_choose_membership_type} m LEFT JOIN {profile} p ON m.entity_id = p.pid WHERE p.uid = :uid",array(':uid'=>$uid));
    foreach ($results as $result) {
            $mtype = $result->memtype;
    }
    switch ($mtype) {
           case "individual": // individual role
                $profile2 = profile2_by_uid_load($user->uid, 'individual');
                $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
                break;
           case "hospital":
                $profile2 = profile2_by_uid_load($user->uid, 'hospital');
                $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
                break;
           case "organization":
                $profile2 = profile2_by_uid_load($user->uid, 'organization');
                $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
                break;
           case "government":
                $profile2 = profile2_by_uid_load($user->uid, 'government');
                $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
                break;
           default:
                $entity_form = "No Detail Profile";
                break;
                
    }
    return $entity_form;    
}
/**
 * User dashboard
 **/
function _ghn_user_dashboard($uid) {
    $ret = '';
    global $base_url,$user;
    $row = array();
    $rows = array(); 
    // get Affiliations 
    // get user name
    $name = _ghn_member_name($uid);
    if ($user->uid != $uid) {
       $ret .= '<h3>You are visiting <br /> Dashboard of '.strtoupper($name).'</h3>';
    }
    else {
       $ret .= '<h3>Dashboard of '.strtoupper($name).'</h3>';
    }
    // get user contact link (only for visitor)
    // get user follow link (only for visitor)
    if ($user->uid != $uid) {
       $row[] = l("Contact ".$name,'user/'.$uid.'/contact');
       $row[] = flag_create_link('follow',$uid);
       $rows[] = array('data' => $row,'class'=>array('dash-row'));
    }
    $row = array();
    //$ret .= '<div class="dashboard-name">Name: '.strtoupper($name).'</div>';
    // member since info
    $results = db_query("SELECT u.created FROM {users} u WHERE uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $membersince = date("d F, Y",$result->created);
    } 
    $row[] = '<div class="label">Member Since: </div>';
    $row[] = '<div class="dashboard-membersince">'.$membersince.'</div>';
    $rows[] = array('data'=>$row,'class' => array('need-row'));
    $row = array();
    // country location (possible display on a map)
    $results = db_query("SELECT a.field_contact_country_iso2 AS iso2 FROM {field_data_field_contact_country} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $uid AND p.label = 'General' LIMIT 1");
    foreach ($results AS $result) {
        $iso2 = $result->iso2;
    } 
    if (!empty($iso2)) {
       $row[] = '<div class="label">Location : </div>';
       $country = country_load($iso2);
       $name = $country->official_name;
       $flag = _ghn_country_flag($iso2);
       $row[] = '<div class="dashboard-country">'.$name.' '.$flag.'</div>';
 
    }
    else {
       $iso2 = 'NA';
       $country = 'N/A';
       $row[] = '<div class="label">Location : </div>';
       $row[] = '<div class="dashboard-country"> N/A</div>';
    }
    $rows[] = array('data'=>$row,'class' => array('dash-row'));
    $row = array();
    // how many forum posts
    $results = db_query("SELECT count(nid) AS forumcount FROM {node} WHERE type = 'forum' AND uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $forumcount = $result->forumcount;
    } 
    $row[] = '<div class="label">Number of forum postings: </div>';
    $row[] = '<div class="dashboard-count"> '.$forumcount.'</div>';
    $rows[] = array('data'=>$row,'class' => array('dash-row'));
    $row = array();
    // how many need posts
    $results = db_query("SELECT count(nid) AS needcount FROM {node} WHERE type = 'need_post' AND uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $result->needcount == 0 ?
        $needcount = $result->needcount :
        $needcount = $result->needcount.' '.l("View List",$base_url."/need-posts/".$uid);
    } 
    $row[] = '<div class="label">Number of Need postings: </div>';
    $row[] = '<div class="dashboard-count"> '.$needcount.'</div>';
    $rows[] = array('data'=>$row,'class' => array('dash-row'));
    $row = array();
    // how many resource posts
    $results = db_query("SELECT count(nid) AS resourcecount FROM {node} WHERE type = 'resource_post' AND uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $result->resourcecount == 0 ?
        $resourcecount = $result->resourcecount :
        $resourcecount = $result->resourcecount.' '.l("View List",$base_url."/resource-posts/".$uid);
    } 
    $row[] = '<div class="label">Number of Resource postings: </div>';
    $row[] = '<div class="dashboard-count"> '.$resourcecount.'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
    $row = array();
    $row[] = '<div class="label">Number of Members Following: </div>';
// count of members you are following
         $results = db_query("SELECT count(content_id) AS num FROM {flag_content} WHERE uid = $uid and content_type = 'user' ");
          foreach ($results AS $result) {
                $memcount = $result->num;
          }
    $row[] = '<div class="dashboard-count">'.$memcount.'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
    $row = array();
    $row[] = '<div class="label">Number of Members Followed: </div>';
// count of members following you
// count of members you are following
         $results = db_query("SELECT count(uid) AS num FROM {flag_content} WHERE content_id = $uid and content_type = 'user' ");
          foreach ($results AS $result) {
                $memcount = $result->num;
          }
    $row[] = '<div class="dashboard-count"> '.$memcount.'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
// get all the matches to date for need and resource postings
    $matches = 0;
    $matches = _ghn_get_all_matches($uid);
    $row = array();
    $row[] = '<div class="label">Number of Matches to date: </div>';
    $row[] = '<div class="dashboard-count"> '.$matches.'</div>';
    $rows[] = array('data' => $row,'class'=>array('dash-row'));
// get all the Medical Missions currently available for this memeber's country
    $matches = 0;
    $matches = _ghn_current_medical_missions($iso2);
    $row = array();
    $row[] = '<div class="label">Number of Medical Missions in '.$name.': </div>';
    if ($matches != 0) {
       $row[] = '<div class="dashboard-count"> '.$matches.' '.l("View List",$base_url."/medical-missions/".$iso2).'</div>';
    }
    else {
       $row[] = '<div class="dashboard-count"> '.$matches.'</div>';
    }
    $rows[] = array('data' => $row,'class'=>array('dash-row'));
    $ret .= theme('table',array('rows'=>$rows));
    // how many matches
    
    return $ret;
}
/** 
 * function to get all matches for a given uid
 **/
function _ghn_current_medical_missions($country) {
      $ret = 0;
      $today = date("m-d-Y",time());
// find all medical missions with host country = $country
      $results = db_query("SELECT count(n.nid) AS ret FROM {node} n LEFT JOIN {field_data_field_mm_host_country} c ON c.entity_id = n.nid LEFT JOIN {field_data_field_event_time} t ON t.entity_id = n.nid WHERE n.status = 1 AND c.field_mm_host_country_iso2 = '$country' AND t.field_event_time_value2 > '$today'");
      foreach ($results AS $result) {
              $ret = $result->ret;
      }
      return $ret;
}
/** 
 * function to get all matches for a given uid
 **/
function _ghn_get_all_matches($uid) {
      $matches = 0;
// find all need posts
      $results = db_query("SELECT nid FROM {node} WHERE type = 'need_post' AND uid = $uid");
// get the matchings for each of the need posts
      foreach ($results AS $result) {
              $ret = ghn_need_matching($uid,$result->nid);
              $matches += count($ret);
      }
// find all request posts
      $results = db_query("SELECT nid FROM {node} WHERE type = 'resource_post' AND uid = $uid");
// get all matchings for each of the resource posts
      foreach ($results AS $result) {
              $ret = ghn_resource_matching($uid,$result->nid);
              $matches += count($ret);
      }
// send the sum total of both need and resource posts matches
      return $matches;

}
/**
 * this function is AJAX form call back for a Need form
 **/
function ghn_post_options(&$form,&$form_state) {
   return $form['post_choices_fieldset'];
}
/**
 * this function is a helper AJAX form call back function for a Need form
 **/
/*
function _ghn_post_form_options($service) {
     $results = db_query("SELECT extra FROM {webform_component} WHERE cid = $service AND nid = 15 LIMIT 1");
     foreach ($results AS $result => $component) {
             $str = $component->extra;
             $tmp = unserialize($str);
             $tmp1 = explode(';',$tmp['items']);
             $choices = $tmp1[0];
             $options = explode('**',$choices);
             $ret = array();
             $i = 0;
             foreach ($options AS $option) {
                     $opt = substr($option,strpos($option,'|')+1);
                     if ($opt != '')
                        $ret[$i++] = $opt;
             }
     }
     return $ret;
     //return array('0'=>$service,'1'=>$service);
}
*/
/** 
 * customing Followed block
 **/
function ghn_followed($uid) {
    global $user,$base_url,$theme_path;
    $output = '';
    $output = '<h3>Followed By</h3>';
    $followeds = array();
// get all the users this user is following
         $results = db_query("SELECT uid AS fuid,timestamp FROM {flag_content} WHERE content_id = $uid AND content_type = 'user'");
          foreach ($results AS $result) {
                  $followeds[]= $result;
          }
    $row = array();
    $rows = array();
    if (count($followeds) > 0) {
      $i = 0;
      $row = array();
      $default_uri = $base_url.'/'.$theme_path.'/images/picture-default.jpg';
      foreach ($followeds as $followed) {
          $hover = '';
          $name = '';
          $account = user_load($followed->fuid);
          if ($account->picture)
             $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'thumbnail'));
          else
              $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// build info for hover information
          $hover = '';
// get user name
          $results = db_query("SELECT a.field_address_name_line AS name FROM {field_data_field_address} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $followed->fuid LIMIT 1");
          foreach ($results AS $result) {
                  $name = $result->name;
          } 
          if (empty($name)) {
             $name = $account->name;
          }
          $hover = $name.' has started following you on '.date("j \of M, Y",$followed->timestamp);

          $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
          if ($i <= 2) {
             $row[$i++] = $ulink;
          }
          else {
               $rows[] = array('data' => $row,'class'=>array('follower-row'));
               $row = array();
               $i = 0;
               $row[$i++] = $pic;
          }
      }
      $rows[] = array('data' => $row,'class'=>array('follower-row'));
      $output .= theme('table',array('rows'=>$rows));
    }
    else {
       $output .= '<div class="empty-text">You have no followers currently</div>';
    }
    return $output;
}
/** 
 * customizing Follower block
 **/
function ghn_followers($uid) {
    global $user,$base_url,$theme_path;
    $output = '';
    //$output = '<h3>Members you are following</h3>';
    $followers = array();
// get all the users this user is following
         $results = db_query("SELECT content_id AS fuid,timestamp FROM {flag_content} WHERE uid = $uid and content_type = 'user' ");
          foreach ($results AS $result) {
                  $followers[]= $result;
          }
    $row = array();
    $rows = array();
    $i = 3; 
    if (count($followers) > 0) {
      $i = 0;
      $row = array();
      $default_uri = $base_url.'/'.$theme_path.'/images/picture-default.jpg';
      foreach ($followers as $follower) {
          $hover = '';
          $name = '';
          $account = user_load($follower->fuid);
          if ($account->picture)
             $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'thumbnail'));
          else
              $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// get user name
          $results = db_query("SELECT a.field_address_name_line AS name FROM {field_data_field_address} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $follower->fuid LIMIT 1");
          foreach ($results AS $result) {
                  $name = $result->name;
          } 
          if (empty($name)) {
             $name = $account->name;
          }
          $hover = 'You started following '.$name.' on '.date("j \of M, Y",$follower->timestamp);
          if ($i <= 2) {
             $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
             $row[$i++] = $ulink;
          }
          else {
               $rows[] = array('data' => $row,'class'=>array('follower-row'));
               $row = array();
               $i = 0;
               $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
               $row[$i++] = $pic;
          }
      }
    $rows[] = array('data' => $row,'class'=>array('follower-row'));
    $output .= theme('table',array('rows'=>$rows));
    }
    else {
    $output .= '<div class="empty-text">You are not following anyone currently</div>';
    }
    return $output;
}
/** 
 * customing Latest visitor block
 **/
function ghn_latest_visitors($uid) {
    global $user,$base_url,$theme_path;
    $output = '';
    $visitors = user_visits_latest($uid, 5);
    $rows = array();
    $i = 3; 
    if (is_array($visitors)) {
      $i = 0;
      $j = 0;
      $row = array();
      $default_uri = $base_url.'/'.$theme_path.'/images/picture-default.jpg';
      foreach ($visitors as $visitor) {
              $account = user_load($visitor->vuid);
              if ($account->picture)
                 $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'thumbnail'));
              else
                 $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// build info for hover information
              $hover = '';
// get user name
              $results = db_query("SELECT a.field_address_name_line AS name FROM {field_data_field_address} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $visitor->vuid LIMIT 1");
              foreach ($results AS $result) {
                      $name = $result->name;
              }
              if (empty($name)) {
                 $name = $account->name;
              }
              $hover = $name;
              if ($i <= 2) {
                 $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
                 $row[$i++] = $ulink;
              }
              else {
                   $rows[] = array('data' => $row,'class'=>array('visitor-row'));
                   $row = array();
                   $i = 0;
                   $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
                   $row[$i++] = $pic;
              }
         }
    }
    $rows[] = array('data' => $row,'class'=>array('visitor-row'));
    $output = theme('table',array('rows'=>$rows));
    return $output;
}
/**
 * GHN request and need post submit
 **/
function ghn_post_submit(&$form,&$form_state) {
         global $user,$node;
         //$form_state['redirect'] = 'dashboard/'.$user->uid;
/*
         $tmp = var_export($node,TRUE);    
         $title = $form_state['input']['title'];
         $service  = $form_state['input']['field_clinical_services']['und'];
         $choice = $form_state['input']['choices'];
//$tmp = var_export($_POST,TRUE);    
print '<pre>';
print $tmp;
print '</pre>';
*/
         $tmp = var_export($form_state['redirect'],TRUE);    
}
/**
 * GHN Matching algorithm for need posts
 **/
function ghn_need_matching($uid,$nid) {
// get the needs posts
         $need = array();
         $subresults = array();
         $results = db_query("SELECT n.nid,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE n.type = 'need_post' AND n.uid = $uid AND n.nid = $nid"); 
         foreach ($results AS $result) {
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_clinical_services_choices_value AS opt FROM {field_data_field_clinical_services_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;
                 } 
                 foreach ($subresults AS $subresult) {
                         $need[$result->service][$result->nid] = $subresult->opt;
                  }
         }
// get the resource posts
         $resource = array();
         $results = db_query("SELECT n.uid,n.nid,n.title,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE n.type = 'resource_post' AND n.uid != $uid"); 
         foreach ($results AS $result) {
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_patient_type_value AS opt FROM {field_data_field_patient_type} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;

                 } 
                 foreach ($subresults AS $subresult) {
                         $resource[$result->service][$result->nid] = $result->uid.';'.$result->title.';'.$subresult->opt;
                  }
         }
         $tmp = var_export($need,TRUE);
         //drupal_set_message($tmp);
         $tmp = var_export($resource,TRUE);
         //drupal_set_message($tmp);
// start matching 
         $ret = array();
         foreach ($need AS $index => $nvalue) {
/*
$tmp = var_export($resource,TRUE);
print '<pre>';
print $tmp;
print '</pre>';
*/
//drupal_set_message($tmp);
                 if (!empty($resource[$index])) {
                    foreach ($nvalue AS $nnid => $nopt) {
                            foreach ($resource[$index] AS $rnid => $ropt) {
                                    $rropt = explode(';',$ropt);
                                    if (!empty($rropt[2])&&($nopt == $rropt[2])) {
                                       $ret[] = $index.';'.$rnid.';'.$rropt[0].';'.$rropt[1].';Matched';
                                    }
                                    else {
                                       $ret[] = $index.';'.$rnid.';'.$rropt[0].';'.$rropt[1].';No match';
                                    }
                            }
                     }
                 }
         }         
$tmp = var_export($ret,TRUE);
//drupal_set_message($tmp);
         return $ret;
}
/**
 * GHN Matching algorithm for Resource posts
 **/
function ghn_resource_matching($uid,$nid) {
// get the resource posts
         $resource = array();
         $need = array();
         $subresults = array();
         $nidservice = '';
	 $results = db_query("SELECT n.nid,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE type = 'resource_post' AND n.uid = $uid AND n.nid = $nid"); 
         foreach ($results AS $result) {
                 $nidservice = $result->service;
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_patient_type_value AS opt FROM {field_data_field_patient_type} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
//drupal_set_message(" nid ".$result->nid." service ".$result->service);
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;

                 } 
                 foreach ($subresults AS $subresult) {
                         $resource[$result->service][$result->nid] = $subresult->opt;
                  }
         }
// get the need posts
         $results = db_query("SELECT n.uid,n.nid,n.title,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE type = 'need_post' AND n.uid != $uid AND f.field_post_service_value = '$nidservice'"); 
         foreach ($results AS $result) {
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_patient_type_value AS opt FROM {field_data_field_patient_type} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;

                 } 
                 foreach ($subresults AS $subresult) {
                         $need[$result->service][$result->nid] = $result->uid.';'.$result->title.';'.$subresult->opt;
                  }
         }
         $tmp = var_export($resource,TRUE);
         //drupal_set_message($tmp);
         $tmp = var_export($need,TRUE);
         //drupal_set_message($tmp);
// start matching 
         $ret = array();
         foreach ($resource AS $index => $rvalue) {
                 if (!empty($need[$index])) {
                    foreach ($rvalue AS $rnid => $ropt) {
                            foreach ($need[$index] AS $nnid => $nopt) {
                                    $nnopt = explode(';',$nopt);
                                    if (!empty($nnopt[2])&&($ropt == $nnopt[2])) {
                                       $ret[] = $index.';'.$nnid.';'.$nnopt[0].';'.$nnopt[1].';Matched';
                                    }
                                    else {
                                       $ret[] = $index.';'.$nnid.';'.$nnopt[0].';'.$nnopt[1].';No match';
                                    }
                            }
                     }
                 }
         }         
         $tmp = var_export($ret,TRUE);
         //drupal_set_message($tmp);
         return $ret;
}
/**
 * Match page listing
 **/
function _ghn_match_page($type,$uid,$nid) {
     global $base_url,$theme_path;
     $ret = '';
     $row = array();
     $rows = array();
     if ($type == "need") {
        $matches = ghn_need_matching($uid,$nid);
     }
     else if ($type == "resource") {
        $matches = ghn_resource_matching($uid,$nid);
     }
     foreach ($matches AS $match => $value) {
             $fields = explode(';',$value);
$tmp = var_export($fields,TRUE);
//drupal_set_message(" HELLO ".$tmp);
// check whether there is a match and then display it
             if ($fields[4] == "Matched"):
// display user picture
                $user = user_load($fields[2]);
                $default_uri = $base_url.'/'.$theme_path.'/images/picture-default.jpg';
                if ($user->picture)
                   $pic = theme('image_style',array('path' => $user->picture->uri, 'style_name' => 'thumbnail'));
                else
                   $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// user name
                $name = _ghn_member_name($fields[2]);
// the matching need/resource posting
                $title = l($fields[3],$base_url.'/node/'.$fields[1]);
// contact link
                $links = '<div class="contact-link">'.l('Contact ',$base_url.'/user/'.$fields[2].'/contact',array('attributes'=>array('class'=>'link'))).'</div><br />';
// follow link
                $links .= flag_create_link('follow',$fields[2]);
                $row[] =$pic;
                $ret = '<div class="match-name">'.$name.'</div><br />';
                $row[] = $ret;
                $ret = '<div class="match-title">'.$title.'</div><br />';
                $row[] = $ret;
                $ret = '<div class="match-links">'.$links.'</div><br />';
                $row[] = $ret;
                $rows[] = array("data"=>$row, 'class'=>array('data-row'));
                $row = array();
             endif;
     }
     $node = node_load($nid);
     $ret = "<h3>Match for your ".ucfirst($type)." posting : ".$node->title.'</h3>';
     $ret .= theme('table',array('rows'=>$rows));
     return $ret;
}
/**
 * Utility function to retrieve the name of a member
 **/
function _ghn_member_name($uid) {
// get user name
         $results = db_query("SELECT realname AS name FROM {realname} WHERE uid = $uid LIMIT 1");
         foreach ($results AS $result) {
                 $name = $result->name;
         }
         if (empty($name)) {
            $account = user_load($uid);
            $name = $account->name;
         }
         return $name;
}
/**
 * Utility function to retrieve uid of a member
 **/
function _ghn_get_uid($nid) {
         $results = db_query("SELECT uid FROM {node} WHERE nid = $nid");
         foreach ($results AS $result) {
                 $uid = $result->uid;
         }
         return $uid;
}
/** 
 *   Utility funciton to get iso2 for a nid
 **/
function _ghn_node_iso2($nid) {
         global $base_url;
// get the node type
// look in the table appropriate for a node type to get the iso2
         $ret = '';
         return $ret;
}
/** Utility funciton to get flag image for a country with iso2
 **/
function _ghn_country_flag($iso2) {
         global $base_url;
         $ret = '';
         if (module_exists('countryicons')) {
            $path = drupal_get_path('module','countryicons');
            $ret = '<img src="'.$base_url.'/'.$path.'/iconsets/shiny/'.strtolower($iso2).'.png">';
          }
          return $ret;
}

