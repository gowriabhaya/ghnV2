<?php
/**
 * Menu alter 
 **/
function ghn_menu_alter(&$items) {
         global $user;
}
/**
 * Form alter 
 **/
function ghn_form_alter(&$form,&$form_state,$form_id) {
         global $user;
         $form['options']['status']['#value'] = 1;
/*
$form['body']['und'][0]['format']['guidelines']['#access'] = FALSE;
$form['body']['und'][0]['format']['help']['#access'] =FALSE;
*/
//drupal_set_message($form_id);
         switch($form_id) {
               case "map_test_node_form":
/*
$tmp = var_export($form['field_maptest_location'],TRUE);
print '<pre>';
print $tmp;
print '</pre>';
*/
                    //$form['field_maptest_location']['#disabled'] = TRUE; 
                    break;
               case "panel_application_node_form":
                    $form['actions']['submit']['#value'] = 'Submit for Review';
                    break;
               case "contact_personal_form":
                    //unset($form['name']);
                    $form['mail']['#required'] = false;
                    //unset($form['mail']);
                    break;
               case "comment_node_need_post_form":
                    unset($form['subject']);
                    unset($form['author']['_author']);
                    break;
               case "comment_node_resource_post_form":
                    $tmp = var_export($form['comment_body']['und'][0]['#title'],TRUE);
                    unset($form['subject']);
                    unset($form['author']['_author']);
                    break;
               case "comment_node_conference_announcement_form":
                    $tmp = var_export($form['comment_body']['und'][0]['#title'],TRUE);
                    unset($form['subject']);
                    unset($form['author']['_author']);
                    break;
               case "comment_node_forum_setup_form":
                    $tmp = var_export($form['comment_body']['und'][0]['#title'],TRUE);
                    unset($form['subject']);
                    unset($form['author']['_author']);
                    break;
               case "user_register_form":
                    //krumo($form['submit']);
                    //$form['captcha']['#description'] = '';
                    $form['t-and-c'] = array(
                         '#type' =>
                         'checkbox', 
                         '#required' => TRUE,
                         '#weight' => 100,
                         '#title' => l(t('Accept Terms & Conditions of Use.'),'ghn-page/terms-conditions'),

);
                    $form['actions']['submit']['#value'] = 'JOIN GHN';
                    break;
               case "mailchimp_lists_user_subscribe_form_newletter":
//krumo($form['submit']);
$form['submit']['#value'] = 'Join';
unset($form['mailchimp_lists']['mailchimp_newletter']['mergevars']['FNAME']);
unset($form['mailchimp_lists']['mailchimp_newletter']['mergevars']['LNAME']);
                    break;
               case "hospital_node_form":
                    if (!array_key_exists('3',$user->roles)) {
                       $form['field_hosp_admin_approval']['und']['#disabled'] = TRUE;
                    }                    
                    if (is_numeric(arg(1))):
                       $form['field_hosp_cvd_registry']['und']['#disabled'] = TRUE;
/*
$tmp = var_export($form,TRUE);
//drupal_set_message($tmp);
$tmp = var_export($user->roles,TRUE);
drupal_set_message($tmp);
print '<pre>';
print $tmp;
print '</pre>';
*/
                      endif;
                      //array_push($form['#submit'],'ghn_hospital_node_submit');  
               case "need_post_node_form":
                      if (is_numeric(arg(1))):
                         $form['field_post_service']['und']['#disabled'] = TRUE;
                         //$form['field_post_country']['und']['#disabled'] = TRUE;
                         $form['field_patient_type']['und']['#disabled'] = TRUE;
                         $form['field_clinical_services_choices']['und']['#disabled'] = TRUE;
                         $form['field_equipment_choices']['und']['#disabled'] = TRUE;
                         $form['field_education_choices']['und']['#disabled'] = TRUE;
                         $form['field_funding_choices']['und']['#disabled'] = TRUE;
                         $form['field_volunteer_choices']['und']['#disabled'] = TRUE;
                         $form['field_medical_1st_level_subcateg']['und']['#disabled'] = TRUE;
                         $form['field_registered_nurse_choices']['und']['#disabled'] = TRUE;
                         $form['field_doctor_choices']['und']['#disabled'] = TRUE;
                         $form['field_cardiologist_choices']['und']['#disabled'] = TRUE;
                         $form['field_surgeons_choices']['und']['#disabled'] = TRUE;
                         $form['field_pharmacist_choices']['und']['#disabled'] = TRUE;
                         $form['field_perfusionists_choices']['und']['#disabled'] = TRUE;
                         $form['field_non_medical_choices']['und']['#disabled'] = TRUE;
                      endif;
$tmp = var_export($form,TRUE);
//drupal_set_message($existingnode);
                      //array_push($form['#submit'],'ghn_need_submit');  
                      break;
               case "resource_post_node_form":
                      global $user;
                      $uid = $user->uid;
// get all the affiliations for this user
                      $options = $form['field_affiliations']['und']['#options'];
                      $results = db_query("SELECT a.field_affiliations_value AS affiliation FROM {field_data_field_affiliations} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $uid");
                      foreach ($options AS $option => $value) {
                              $default[$option] = TRUE;
                      }
                      foreach ($results AS $result) {
                              foreach ($options AS $option => $value) {
                                      if ($option == $result->affiliation) {
                                         $default[$option] = FALSE;
                                      }
                              }
                      }
                      foreach ($default AS $option => $value) {
                              if ($value) {
                                 unset($form['field_affiliations']['und']['#options'][$option]);
                              }
                      }
                      if (is_numeric(arg(1))):
                         $options = $form['field_affiliations']['und']['#options'];
                         foreach ($options AS $option => $value) {
                                 $default[$option] = TRUE;
                         }
                         $form['field_post_service']['und']['#disabled'] = TRUE;
                         //$form['field_post_country']['und']['#disabled'] = TRUE;
                         $form['field_patient_type']['und']['#disabled'] = TRUE;
                         $form['field_clinical_services_choices']['und']['#disabled'] = TRUE;
                         $form['field_equipment_choices']['und']['#disabled'] = TRUE;
                         $form['field_education_choices']['und']['#disabled'] = TRUE;
                         $form['field_funding_choices']['und']['#disabled'] = TRUE;
                         $form['field_volunteer_choices']['und']['#disabled'] = TRUE;
                         $form['field_medical_1st_level_subcateg']['und']['#disabled'] = TRUE;
                         $form['field_registered_nurse_choices']['und']['#disabled'] = TRUE;
                         $form['field_doctor_choices']['und']['#disabled'] = TRUE;
                         $form['field_cardiologist_choices']['und']['#disabled'] = TRUE;
                         $form['field_surgeons_choices']['und']['#disabled'] = TRUE;
                         $form['field_pharmacist_choices']['und']['#disabled'] = TRUE;
                         $form['field_perfusionists_choices']['und']['#disabled'] = TRUE;
                         $form['field_non_medical_choices']['und']['#disabled'] = TRUE;
                         $form['field_post_country']['und']['#disabled'] = TRUE;
                         $form['field_affiliations']['und']['#disabled'] = TRUE;
                      endif;
                      //array_push($form['#submit'],'ghn_resource_submit');
                    break;
               case "user_login":
                    array_push($form['#submit'],'ghn_user_login_submit');
                    break;
               case "user_profile_form":
                    array_push($form['#submit'],'ghn_profile_submit');
                    break;
               case "profile2_edit_general_form":
                    array_push($form['#submit'],'ghn_general_profile_submit');
                    //$form['submit']['#submit'] = 'ghn_user_submit';
                    break;
               case "profile2_edit_affiliations_form":
                    array_push($form['#submit'],'ghn_affiliation_submit');
                    break;
         }
}
/**
 * redirecting user pages 
 * making an entry in redirect table for first time user 
 **/
function ghn_user_login_submit(&$form,&$form_state) {
         global $user;
         $uid = $user->uid;
// check whether this user has already a redirection
         $results = db_query('SELECT rid FROM {redirect} WHERE uid = :uid LIMIT 1',array(':uid'=>$uid));
         $entry = 0;
         foreach ($results AS $result) {
// add an entry if there is no redirection in db table by calling redirect_save
                 if ($result->rid != 0)
                    $entry = $result->rid;
         }
         if ($entry == 0) {
             $tmp = array();
             $tmp['rid'] = '';
             $tmp['uid'] = $uid;
             $tmp['type'] = 'redirect';
             $tmp['hash'] = '';
             $tmp['source'] = 'user/'.$uid;
             $tmp['source_options'] = array();
             $tmp['redirect'] = 'dashboard/'.$uid;
             $tmp['redirect_options'] = array();
             $tmp['language'] = 'und';
             $tmp['status_code'] = 0;
             $tmp['override'] = false;
             $redirect = (object)$tmp;
             redirect_save($redirect);
          }
          $form_state['redirect'] = 'dashboard/'.$uid;
}
/**
 * redirecting node form submission 
 **/
function ghn_node_submit(&$form,&$form_state) {
         global $user;
         //drupal_set_message("Your Medical Mission Updated");
         $form_state['redirect'] = 'node/add/medical-mission';
   //$tmp = var_export($form_state['redirect'], TRUE);
   foreach ($form_state AS $keys => $value) {
if ($keys == 'type') {
}
      if ($keys == "type") {
         switch ($value['#value']) {
              case "resource_post":
                    //drupal_set_message("Your Resource Posting was updated");
                    break;
          }
      }
    }
}
/**
 * redirecting CAP form submission 
 **/
function ghn_cap_submit(&$form,&$form_state) {
         global $user;
         $uid = $user->uid;
         drupal_set_message("Your CAP application submitted ");
         $form_state['redirect'] = 'dashboard/'.$uid;
}
/**
 * redirecting affiliation form submission 
 **/
function ghn_affiliation_submit(&$form,&$form_state) {
         global $user;
         drupal_set_message("Your Affiliations Updated");
         $form_state['redirect'] = 'affiliations-profile';
}
/**
 * redirecting user login form submission 
 **/
function ghn_profile_submit(&$form,&$form_state) {
         global $user;
         drupal_set_message("Your Membership Information Updated");
         $form_state['redirect'] = 'dashboard/'.$user->uid;
}
/**
 * redirecting user login form submission 
 **/
function ghn_general_profile_submit(&$form,&$form_state) {
         global $user;
         drupal_set_message("Your Contact Information Updated");
         $form_state['redirect'] = 'dashboard/'.$user->uid;
}
/**
 * Implements hook_init().
 */
function ghn_init() {
  //drupal_add_library('system', 'drupal.ajax');
}
 
/**
 * hook_menu
 **/
function ghn_menu() {
    $items = array();
    $items['map-array/%'] = array(
        'page callback' => '_ghn_map_array',
        'page arguments' => array(1),
        'access callback' => TRUE, 
        'type' => MENU_CALLBACK,
    );
    $items['main-profile'] = array(
        'page callback' => '_profile2_main_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
/*
    $items['affiliations/%'] = array(
        'page callback' => '_ghn_user_affiliations',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
*/
    $items['general-profile'] = array(
        'page callback' => '_profile2_general_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['affiliations-profile'] = array(
        'page callback' => '_profile2_affiliations_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['detail-profile'] = array(
        'page callback' => '_profile2_detail_form',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['dashboard/%'] = array(
        'page callback' => '_ghn_user_dashboard',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['match/%/%/%'] = array(
        'title' => '',
        'page callback' => '_ghn_match_page',
        'page arguments' => array(1,2,3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}
/**
 * profile2 is not registering profile pages with the menu
 * this is the hack for it, so page existing manager can find it 
 * for panels consumption
 **/
function _profile2_main_form() {
    global $user;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $profile2 = profile2_by_uid_load($user->uid, 'main');
    $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
    return $entity_form;    
}
function _profile2_general_form() {
    global $user;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $profile2 = profile2_by_uid_load($user->uid, 'general');
    $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
    return $entity_form;    
}
function _profile2_affiliations_form() {
    global $user;
    module_load_include('inc', 'profile2_page', 'profile2_page');
    $profile2 = profile2_by_uid_load($user->uid, 'affiliations');
    $entity_form = entity_ui_get_form('profile2', $profile2, 'edit');
    return $entity_form;    
}
/**
 * User dashboard
 **/
function _ghn_user_dashboard($uid) {
    $ret = '';
    global $base_url,$user,$theme_path;
    $row = array();
    $rows = array(); 
    // get Affiliations 
    // get user name
    $name = _ghn_member_name($uid);
    if ($user->uid != $uid) {
       $account = user_load($uid);
       if ($account->picture)
          $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'activity_avatar'));
       else {
          $default_uri = $base_url.'/'.$theme_path.'/images/default-user45x47.jpg';
          $pic = theme('image',array('path' => $default_uri, 'style_name' => 'activity_avatar'));
       }
       $ret .= '<div class="h14">You are viewing <br /> Profile of <em>'.strtoupper($name).' '.$pic.'</div>';
    }
    else {
       $ret .= '<div class="h14">Profile of <em>'.strtoupper($name).'</em></div>';
    }
    // get user contact link (only for visitor)
    // get user follow link (only for visitor)
    if ($user->uid != $uid) {
       $row[] = l("Contact ".$name,'user/'.$uid.'/contact');
       $row[] = flag_create_link('follow',$uid);
       $rows[] = array('data' => $row,'class'=>array('dash-row'));
    }
    $row = array();
    //$ret .= '<div class="dashboard-name">Name: '.strtoupper($name).'</div>';
    // member since info
    $results = db_query("SELECT u.created FROM {users} u WHERE uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $membersince = date("d F, Y",$result->created);
    } 
    $row[] = '<div class="label">Member Since: </div>';
    $row[] = '<div class="dashboard-membersince">'.$membersince.'</div>';
    $rows[] = array('data'=>$row,'class' => array('need-row'));
    $row = array();
    // country location (possible display on a map)
    $results = db_query("SELECT a.field_contact_country_iso2 AS iso2 FROM {field_data_field_contact_country} a LEFT JOIN {profile} p ON p.pid = a.entity_id WHERE p.uid = $uid AND p.label = 'General' LIMIT 1");
    foreach ($results AS $result) {
        $iso2 = $result->iso2;
    } 
    if (!empty($iso2)) {
       $row[] = '<div class="label">Location : </div>';
       $country = country_load($iso2);
       $name = $country->official_name;
       $flag = _ghn_country_flag($iso2.';'.$name);
       $row[] = '<div class="dashboard-country">'.$name.' '.$flag.'</div>';
 
    }
    else {
       $iso2 = 'NA';
       $country = 'N/A';
       $row[] = '<div class="label">Location : </div>';
       $row[] = '<div class="dashboard-country"> N/A</div>';
    }
    $rows[] = array('data'=>$row,'class' => array('dash-row'));
    $row = array();
    // how many forum posts
    $results = db_query("SELECT count(nid) AS forumcount FROM {node} WHERE type = 'forum' AND uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $forumcount = $result->forumcount;
    } 
    $row[] = '<div class="label">Number of forum postings: </div>';
    $row[] = '<div class="dashboard-count"> '.$forumcount.'</div>';
    $rows[] = array('data'=>$row,'class' => array('dash-row'));
    $row = array();
    // how many need posts
    $results = db_query("SELECT count(nid) AS needcount FROM {node} WHERE type = 'need_post' AND uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $result->needcount == 0 ?
        $needcount = $result->needcount :
        $needcount = $result->needcount.' '.l("View List",$base_url."/need-posts/".$uid);
    } 
    $row[] = '<div class="label">Number of Need postings: </div>';
    $row[] = '<div class="dashboard-count"> '.$needcount.'</div>';
    $rows[] = array('data'=>$row,'class' => array('dash-row'));
    $row = array();
    // how many resource posts
    $results = db_query("SELECT count(nid) AS resourcecount FROM {node} WHERE type = 'resource_post' AND uid = $uid LIMIT 1");
    foreach ($results AS $result) {
        $result->resourcecount == 0 ?
        $resourcecount = $result->resourcecount :
        $resourcecount = $result->resourcecount.' '.l("View List",$base_url."/resource-posts/".$uid);
    } 
    $row[] = '<div class="label">Number of Resource postings: </div>';
    $row[] = '<div class="dashboard-count"> '.$resourcecount.'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
    $row = array();
    $row[] = '<div class="label">Number of Members Following: </div>';
// count of members you are following
         $results = db_query("SELECT count(content_id) AS num FROM {flag_content} WHERE uid = $uid and content_type = 'user' ");
          foreach ($results AS $result) {
                $memcount = $result->num;
          }
    $row[] = '<div class="dashboard-count">'.$memcount.'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
    $row = array();
    $row[] = '<div class="label">Your Bookmarks: </div>';
// Bookmarks 
    $row[] = '<div class="dashboard-count"> '.l("view list","bookmarks").'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
    $row = array();
    $row[] = '<div class="label">Number of Members Followed: </div>';
// count of members following you
// count of members you are following
         $results = db_query("SELECT count(uid) AS num FROM {flag_content} WHERE content_id = $uid and content_type = 'user' ");
          foreach ($results AS $result) {
                $memcount = $result->num;
          }
    $row[] = '<div class="dashboard-count"> '.$memcount.'</div>';
    $rows[] = array('data'=>$row,'class'=>array('dash-row'));
// get all the matches to date for need and resource postings
    $matches = 0;
    $matches = _ghn_get_all_matches($uid);
    $row = array();
    $row[] = '<div class="label">Number of Matches to date: </div>';
    $row[] = '<div class="dashboard-count"> '.$matches.'</div>';
    $rows[] = array('data' => $row,'class'=>array('dash-row'));
// get all the CVD hospital registry 
    $cvdhosp = 0;
    $results = db_query("SELECT count(a.entity_id) As numb FROM {field_data_field_hosp_admin_approval} a LEFT JOIN {field_data_field_hosp_cvd_registry} d ON d.entity_id = a.entity_id LEFT JOIN {node} n ON n.nid = a.entity_id WHERE n.status = :status AND a.field_hosp_admin_approval_value = :approv AND d.field_hosp_cvd_registry_value = :regt",array(':status'=>1,':approv'=>1,':regt'=>1)); 
    foreach ($results AS $result) {
            $cvdhosp = $result->numb;
    }
    $row = array();
    $row[] = '<div class="label">Number of CVD Hospitals in LMICs: </div>';
    if ($cvdhosp != 0) {
       $row[] = '<div class="dashboard-count"> '.$cvdhosp.' '.l("View List",$base_url."/cvd-registry").'</div>';
    }
    else {
       $row[] = '<div class="dashboard-count"> '.$cvdhosp.'</div>';
    }
    $rows[] = array('data' => $row,'class'=>array('dash-row'));
// get all the Medical Missions currently available for this memeber's country
    $matches = 0;
    //$matches = _ghn_current_medical_missions($iso2);
    $matches = _ghn_current_medical_missions();
    $row = array();
    $row[] = '<div class="label">Number of Current Medical Missions: </div>';
    if ($matches != 0) {
       $row[] = '<div class="dashboard-count"> '.$matches.' '.l("View List",$base_url."/medical-missions").'</div>';
    }
    else {
       $row[] = '<div class="dashboard-count"> '.$matches.'</div>';
    }
    $rows[] = array('data' => $row,'class'=>array('dash-row'));
// Conferences 
    $row = array();
    $row[] = '<div class="label">Upcoming Conferences: </div>';
    $row[] = '<div class="dashboard-count"> '.l("View List",$base_url."/conference-list").'</div>';
    $rows[] = array('data' => $row,'class'=>array('dash-row'));
    $ret .= '<div class="profileInfo">';
    $ret .= '<div class="profileInfoTop"></div>';
    $ret .= '<div class="profileInfoMid"><br>';
    $ret .= theme('table',array('rows'=>$rows));
    $ret .= '<br></div>';
    $ret .= '<div class="profileInfoBot"></div>';
    $ret .= '</div>';
    return $ret;
}
/** 
 * function to get all medical missions for a given country 
 **/
function _ghn_current_medical_missions($country = NULL) {
      $ret = 0;
      $today = date("m-d-Y",time());
      if ($country) {
// find all medical missions with host country = $country
         $results = db_query("SELECT count(n.nid) AS ret FROM {node} n LEFT JOIN {field_data_field_mm_host_country} c ON c.entity_id = n.nid LEFT JOIN {field_data_field_event_time} t ON t.entity_id = n.nid WHERE n.status = 1 AND c.field_mm_host_country_iso2 = '$country' AND t.field_event_time_value2 > '$today'");
      }
      else {
         $results = db_query("SELECT count(n.nid) AS ret FROM {node} n LEFT JOIN {field_data_field_mm_host_country} c ON c.entity_id = n.nid LEFT JOIN {field_data_field_event_time} t ON t.entity_id = n.nid AND n.type = 'medical_mission' WHERE n.status = 1 AND t.field_event_time_value2 > '$today'");
      }
      foreach ($results AS $result) {
              $ret = $result->ret;
      }
      return $ret;
}
/** 
 * function to get all matches for a given uid
 **/
function _ghn_get_all_matches($uid) {
      $matches = 0;
// find all need posts
      $results = db_query("SELECT nid FROM {node} WHERE type = 'need_post' AND uid = $uid");
// get the matchings for each of the need posts
      foreach ($results AS $result) {
              $ret = ghn_need_matching($uid,$result->nid);
              $matches += count($ret);
      }
// find all request posts
      $results = db_query("SELECT nid FROM {node} WHERE type = 'resource_post' AND uid = $uid");
// get all matchings for each of the resource posts
      foreach ($results AS $result) {
              $ret = ghn_resource_matching($uid,$result->nid);
              $matches += count($ret);
      }
// send the sum total of both need and resource posts matches
      return $matches;

}
/**
 * this function is AJAX form call back for a Need form
 **/
function ghn_post_options(&$form,&$form_state) {
   return $form['post_choices_fieldset'];
}
/**
 * this function is a helper AJAX form call back function for a Need form
 **/
/*
function _ghn_post_form_options($service) {
     $results = db_query("SELECT extra FROM {webform_component} WHERE cid = $service AND nid = 15 LIMIT 1");
     foreach ($results AS $result => $component) {
             $str = $component->extra;
             $tmp = unserialize($str);
             $tmp1 = explode(';',$tmp['items']);
             $choices = $tmp1[0];
             $options = explode('**',$choices);
             $ret = array();
             $i = 0;
             foreach ($options AS $option) {
                     $opt = substr($option,strpos($option,'|')+1);
                     if ($opt != '')
                        $ret[$i++] = $opt;
             }
     }
     return $ret;
     //return array('0'=>$service,'1'=>$service);
}
*/
/** 
 * customing Followed block
 **/
function ghn_followed($uid) {
    global $user,$base_url,$theme_path;
    $output = '';
    $output = '<h2 class="pane-title block-title">Followed By</h2>';
    $followeds = array();
// get all the users this user is following
         $results = db_query("SELECT uid AS fuid,timestamp FROM {flag_content} WHERE content_id = $uid AND content_type = 'user'");
          foreach ($results AS $result) {
                  $followeds[]= $result;
          }
    if (count($followeds) > 0) {
      $output .= '<ul>';
      $default_uri = $base_url.'/'.$theme_path.'/images/default-user.jpg';
      foreach ($followeds as $followed) {
          $hover = '';
          $name = '';
          $account = user_load($followed->fuid);
          if ($account->picture)
             $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'thumbnail'));
          else
              $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// build info for hover information
          $hover = '';
// get user name
          $name = _ghn_member_name($followed->fuid);
          $hover = $name.' has started following you on '.date("j \of M, Y",$followed->timestamp);

          $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
          $output .= '<li>'.$ulink.'</li>';
      }
      $output .= '</ul>';
    }
    else {
       $output .= '<div class="empty-text">You have no followers currently</div>';
    }
    return $output;
}
/** 
 * customizing Follower block
 **/
function ghn_followers($uid) {
    global $user,$base_url,$theme_path;
    $output = '';
    //$output = '<h2>Following</h2>';
    $followers = array();
// get all the users this user is following
         $results = db_query("SELECT content_id AS fuid,timestamp FROM {flag_content} WHERE uid = $uid and content_type = 'user' ");
          foreach ($results AS $result) {
                  $followers[]= $result;
          }
    if (count($followers) > 0) {
       $output .= '<ul>';
       $default_uri = $base_url.'/'.$theme_path.'/images/default-user.jpg';
       foreach ($followers as $follower) {
               $hover = '';
               $name = '';
               $account = user_load($follower->fuid);
               if ($account->picture)
                  $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'thumbnail'));
               else
                   $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// get user name
               $name = _ghn_member_name($follower->fuid);
               $hover = 'You started following '.$name.' on '.date("j \of M, Y",$follower->timestamp);
               $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$account->uid.'">'.$pic.'</a>';
               $output .= '<li>'.$ulink.'</li>';
          }
          $output .= '</ul>';
      }
      else {
           $output .= '<div class="empty-text">You are not following anyone currently</div>';
      }
    return $output;
}
/** 
 * customing Latest visitor block
 **/
function ghn_latest_visitors($uid) {
    global $user,$base_url,$theme_path;
    $output = '';
    //$output = '<h3>Latest Visitors</h3>';
    $visitors = user_visits_latest($uid, 4);
    if (count($visitors) > 0) {
      $output .= '<ul>';
      $default_uri = $base_url.'/'.$theme_path.'/images/default-user.jpg';
      foreach ($visitors as $visitor) {
// user_visits_latest does not check user status, I need to filter it here UMM
              $status = 0;
              $results = db_query("SELECT status FROM {users} WHERE uid = :uid",array(':uid'=>$visitor->vuid));
              foreach ($results AS $result) {
                      $result->status==1 ? $status = 1: $status = 0;
              }
              if ($status) {
                 $account = user_load($visitor->vuid);
              //if ((!$account->picture)&&($account->picture))
                 if ($account->picture)
                    $pic = theme('image_style',array('path' => $account->picture->uri, 'style_name' => 'thumbnail'));
                 else
                    $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
// build info for hover information
                 $hover = '';
// get user name
                 $name = _ghn_member_name($visitor->vuid);
                 $hover = $name;
                 $ulink = '<a title="'.$hover.'" href="'.$base_url.'/dashboard/'.$visitor->vuid.'">'.$pic.'</a>';
                 $output .= '<li>'.$ulink.'</li>';
              }
         }
         $output .= '</ul>';
    }
    else {
         $output .= 'No member had visited your dashboard recently';
    }
    return $output;
}
/**
 * GHN need post submit
 **/
function ghn_need_submit(&$form,&$form_state) {
         global $user,$node;
/*
         $tmp = var_export($node,TRUE);    
         $title = $form_state['input']['title'];
         $service  = $form_state['input']['field_clinical_services']['und'];
         $choice = $form_state['input']['choices'];
//$tmp = var_export($_POST,TRUE);    
print '<pre>';
print $tmp;
print '</pre>';
         $tmp = var_export($form_state['redirect'],TRUE);    
         //$form_state['redirect'] = 'dashboard/'.$user->uid;
*/

}
/**
 * GHN request post submit
 **/
function ghn_resource_submit(&$form,&$form_state) {
         global $user,$node;
         //$form_state['redirect'] = 'dashboard/'.$user->uid;
/*
         $tmp = var_export($node,TRUE);    
         $title = $form_state['input']['title'];
         $service  = $form_state['input']['field_clinical_services']['und'];
         $choice = $form_state['input']['choices'];
//$tmp = var_export($_POST,TRUE);    
print '<pre>';
print $tmp;
print '</pre>';
*/
         $tmp = var_export($form_state['redirect'],TRUE);    
}
/**
 * GHN Matching algorithm for need posts
 **/
function ghn_need_matching($uid,$nid) {
// get the needs posts
         $need = array();
         $subresults = array();
$node = node_load($nid);
$tmp = var_export($node,TRUE);
//drupal_set_message($tmp);
         $results = db_query("SELECT n.nid,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE n.type = 'need_post' AND n.uid = $uid AND n.nid = $nid"); 
         foreach ($results AS $result) {
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_clinical_services_choices_value AS opt FROM {field_data_field_clinical_services_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;
                 } 
                 foreach ($subresults AS $subresult) {
                         $need[$result->service][$result->nid] = $subresult->opt;
                  }
         }

// get the resource posts
         $resource = array();
         $results = db_query("SELECT n.uid,n.nid,n.title,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE n.type = 'resource_post' AND n.uid != $uid"); 
         foreach ($results AS $result) {
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_clinical_services_choices_value AS opt FROM {field_data_field_clinical_services_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;

                 } 
                 foreach ($subresults AS $subresult) {
                         $resource[$result->service][$result->nid] = $result->uid.';'.$result->title.';'.$subresult->opt;
                  }
         }
         $tmp = var_export($need,TRUE);
         //drupal_set_message($tmp);
         $tmp = var_export($resource,TRUE);
         //drupal_set_message($tmp);
// start matching 
         $ret = array();
//print_r($need);
//print_r($resource);
         foreach ($need AS $index => $nvalue) {
/*
$tmp = var_export($resource,TRUE);
print '<pre>';
print $tmp;
print '</pre>';
*/
//drupal_set_message($tmp);
                 if (!empty($resource[$index])) {
                    foreach ($nvalue AS $nnid => $nopt) {
//print_r($nvalue);
                            foreach ($resource[$index] AS $rnid => $ropt) {
                                    $rropt = explode(';',$ropt);
                                    if (!empty($rropt[2])&&($nopt == $rropt[2])) {
                                       $ret[] = $index.';'.$rnid.';'.$rropt[0].';'.$rropt[1].';Matched';
                                    }
/* no need to send unmatched entries
                                    else {
                                         $ret[] = $index.';'.$rnid.';'.$rropt[0].';'.$rropt[1].';No match';
                                    }
*/
                            }
                     }
                 }
         }         
$tmp = var_export($ret,TRUE);
//drupal_set_message($tmp);
         return $ret;
}
/**
 * GHN Matching algorithm for Resource posts
 **/
function ghn_resource_matching($uid,$nid) {
// get the resource posts
         $resource = array();
         $need = array();
         $subresults = array();
         $nidservice = '';
	 $results = db_query("SELECT n.nid,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE type = 'resource_post' AND n.uid = $uid AND n.nid = $nid");
         foreach ($results AS $result) {
                 $nidservice = $result->service;
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_patient_type_value AS opt FROM {field_data_field_patient_type} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
//drupal_set_message(" nid ".$result->nid." service ".$result->service);
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;

                 } 
                 foreach ($subresults AS $subresult) {
                         $resource[$result->service][$result->nid] = $subresult->opt;
                  }
         }
// get the need posts
         $results = db_query("SELECT n.uid,n.nid,n.title,f.field_post_service_value AS service FROM {node} n LEFT JOIN {field_data_field_post_service} f ON f.entity_id = n.nid  WHERE type = 'need_post' AND n.uid != $uid AND f.field_post_service_value = '$nidservice'"); 
         foreach ($results AS $result) {
                 switch ($result->service) {
                        case "Clinical Services":
                             $subresults = db_query("SELECT field_patient_type_value AS opt FROM {field_data_field_patient_type} WHERE entity_id = $result->nid"); 
                             break;
                        case "Educational Activities":
                             $subresults = db_query("SELECT field_education_choices_value AS opt FROM {field_data_field_education_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Medical Equipment and Supplies":
                             $subresults = db_query("SELECT field_equipment_choices_value AS opt FROM {field_data_field_equipment_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Volunteers and personnel":
                             $subresults = db_query("SELECT field_volunteer_choices_value AS opt FROM {field_data_field_volunteer_choices} WHERE entity_id = $result->nid"); 
                             break;
                        case "Funding":
                             $subresults = db_query("SELECT field_funding_choices_value AS opt FROM {field_data_field_funding_choices} WHERE entity_id = $result->nid"); 
                             break;

                 } 
                 foreach ($subresults AS $subresult) {
                         $need[$result->service][$result->nid] = $result->uid.';'.$result->title.';'.$subresult->opt;
                  }
         }
         $tmp = var_export($resource,TRUE);
         //drupal_set_message($tmp);
         $tmp = var_export($need,TRUE);
         //drupal_set_message($tmp);
// start matching 
         $ret = array();
         foreach ($resource AS $index => $rvalue) {
                 if (!empty($need[$index])) {
                    foreach ($rvalue AS $rnid => $ropt) {
                            foreach ($need[$index] AS $nnid => $nopt) {
                                    $nnopt = explode(';',$nopt);
                                    if (!empty($nnopt[2])&&($ropt == $nnopt[2])) {
                                       $ret[] = $index.';'.$nnid.';'.$nnopt[0].';'.$nnopt[1].';Matched';
                                    }
/* no need to send back unmatched resources
                                    else {
                                       $ret[] = $index.';'.$nnid.';'.$nnopt[0].';'.$nnopt[1].';No match';
                                    }
*/
                            }
                     }
                 }
         }         
         $tmp = var_export($ret,TRUE);
         //drupal_set_message($tmp);
         return $ret;
}
/**
 * Match page listing
 **/
function _ghn_match_page($type,$uid,$nid) {
     global $base_url,$theme_path;
     $ret = '';
     $row = array();
     $rows = array();
     if ($type == "need") {
        $matches = ghn_need_matching($uid,$nid);
     }
     else if ($type == "resource") {
        $matches = ghn_resource_matching($uid,$nid);
     }
     foreach ($matches AS $match => $value) {
             $fields = explode(';',$value);
$tmp = var_export($fields,TRUE);
//drupal_set_message(" HELLO ".$tmp);
// check whether there is a match and then display it
             if ($fields[4] == "Matched"):
// display user picture
                $user = user_load($fields[2]);
                $default_uri = $base_url.'/'.$theme_path.'/images/default-user.jpg';
                if ($user->picture)
                   $pic = theme('image_style',array('path' => $user->picture->uri, 'style_name' => 'thumbnail'));
                else {
                   $pic = theme('image',array('path' => $default_uri, 'style_name' => 'thumbnail'));
                }
                $pic = '<a href="'.$base_url.'/dashboard/'.$fields[2].'">'.$pic.'</a>';
// user name
                $name = _ghn_member_name($fields[2]);
                $name = strtolower($name);
                $name_link = l(ucwords($name),$base_url.'/dashboard/'.$fields[2]);
// the matching need/resource posting
                $title = strtolower($fields[3]);
                $title = l(ucwords($title),$base_url.'/node/'.$fields[1]);
// contact link
                $links = '<div class="contact-link">'.l('Contact ',$base_url.'/user/'.$fields[2].'/contact',array('attributes'=>array('class'=>'link'))).'</div><br />';
// follow link
                $links .= flag_create_link('follow',$fields[2]);
                $row[] =$pic;
                $ret = '<div class="match-name">'.$name_link.'</div><br />';
                $row[] = $ret;
                $ret = '<div class="match-title">'.$title.'</div><br />';
                $row[] = $ret;
                $ret = '<div class="match-links">'.$links.'</div><br />';
                $row[] = $ret;
                $rows[] = array("data"=>$row, 'class'=>array('data-row'));
                $row = array();
             endif;
     }
     $node = node_load($nid);
     $ret = "<h3>Match for your ".ucfirst($type)." posting : <br /><em>".$node->title.'</em></h3>';
     $ret .= theme('table',array('rows'=>$rows));
     return $ret;
}
/**
 * Utility function to retrieve the name of a member
 **/
function _ghn_member_name($uid) {
         if (!is_numeric($uid)) return '';
// get user name
// unfortunately realname table does not update when the contact form changes
// names
         //$results = db_query("SELECT realname AS name FROM {realname} WHERE uid = $uid LIMIT 1");
         $results = db_query("SELECT field_contact_fname_value AS fname,field_contact_lname_value AS lname FROM {field_data_field_contact_fname} f LEFT JOIN {field_data_field_contact_lname} l ON l.entity_id = f.entity_id LEFT JOIN {profile} p ON p.pid = f.entity_id WHERE uid = $uid AND type = 'general' LIMIT 1");
         foreach ($results AS $result) {
                 $name = strtoupper($result->fname.' '.$result->lname);
         }
         if (empty($name)) {
            $account = user_load($uid);
            $name = strtoupper($account->name);
         }
         return $name;
}
/**
 * Utility function to retrieve uid of a member
 **/
function _ghn_get_uid($nid) {
         $results = db_query("SELECT uid FROM {node} WHERE nid = $nid");
         foreach ($results AS $result) {
                 $uid = $result->uid;
         }
         return $uid;
}
/** 
 *   Utility funciton to get iso2 for a nid
 **/
function _ghn_node_iso2($nid) {
         global $base_url;
// get the node type
         $node = node_load($nid);
         $type = $node->type; 
// look in the table appropriate for a node type to get the iso2
         $ret = '';
         $iso2 = '';
         $country = '';
         switch ($type) {
                case 'need_post':
                     $results = db_query('SELECT name AS country,field_post_country_iso2 AS iso2 FROM {field_data_field_post_country} f LEFT JOIN {countries_country} c ON c.iso2 = f.field_post_country_iso2 WHERE entity_id = :nid AND bundle = :type',array(':nid'=>$nid,':type'=>'need_post'));
                     foreach ($results AS $result) {
                             $iso2 = $result->iso2;
                             $country = $result->country;
                     }
                     break;
                case 'resource_post':
                     $results = db_query('SELECT name AS country,field_post_country_iso2 AS iso2 FROM {field_data_field_post_country} f LEFT JOIN {countries_country} c ON c.iso2 = f.field_post_country_iso2 WHERE entity_id = :nid AND bundle = :type',array(':nid'=>$nid,':type'=>'resource_post'));
                     foreach ($results AS $result) {
                             $iso2 = $result->iso2;
                             $country = $result->country;
                     }
                     break;
                case 'medical_mission':
                     $results = db_query('SELECT name AS country,field_mm_host_country_iso2 AS iso2 FROM {field_data_field_mm_host_country} f LEFT JOIN {countries_country} c ON c.iso2 = f.field_mm_host_country_iso2 WHERE entity_id = :nid',array(':nid'=>$nid));
                     foreach ($results AS $result) {
                             $iso2 = $result->iso2;
                             $country = $result->country;
                     }
                     break;
                case 'conference_announcement':
                     $results = db_query('SELECT name AS country,field_conf_country_iso2 AS iso2 FROM {field_data_field_conf_country} f LEFT JOIN {countries_country} c ON c.iso2 = f.field_conf_country_iso2 WHERE entity_id = :nid',array(':nid'=>$nid));
                     foreach ($results AS $result) {
                             $iso2 = $result->iso2;
                             $country = $result->country;
                     }
                     break;
                case 'hospital':
                     $results = db_query('SELECT name AS country,field_phosp_country_iso2 AS iso2 FROM {field_data_field_phosp_country} f LEFT JOIN {countries_country} c ON c.iso2 = f.field_phosp_country_iso2 WHERE entity_id = :nid',array(':nid'=>$nid));
                     foreach ($results AS $result) {
                             $iso2 = $result->iso2;
                             $country = $result->country;
                     }
                     break;
         }
         return $iso2.';'.$country;
}
/** Utility funciton to get flag image for a country with iso2
 **/
function _ghn_country_flag($iso2) {
         global $base_url;
         $ret = '';
         if (module_exists('countryicons')) {
            $tmp = explode(';',$iso2);
            $iso2 = $tmp[0];
            $country = $tmp[1];
            $path = drupal_get_path('module','countryicons');
            $ret = '<img title="'.$country.'" src="'.$base_url.'/'.$path.'/iconsets/shiny/'.strtolower($iso2).'.png">';
          }
          return $ret;
}
/**
 * Cleaning up the status message
 **/
function _ghn_status_message($msg,$submsg) {
          $start = 0;
          $start = strpos($msg,$submsg,0);
          $length = strlen($submsg);
          if ($start != 0) {
             $newmsg = substr_replace($msg,'',$start,$length);
          }
          else {
               $newmsg = $msg;
          }
          return $newmsg;
}
/**
 * Cron to set up redirect user/* to dashboard/* in redirect table
 **/
function ghn_cron() {
         $crontime = time();
         $crontime = $crontime - 172800;
//drupal_set_message(" cronttime ".$crontime);
// get all uids
         $uids = array();
         $results = db_query("SELECT uid FROM {users} WHERE created >= :crontime",array(':crontime'=>$crontime));
         foreach ($results AS $result) {
                 $uids[] = $result->uid;
         }
         foreach ($uids AS $index => $uid) {
// check whether this user has already a redirection
                 $results = db_query('SELECT rid FROM {redirect} WHERE uid = :uid LIMIT 1',array(':uid'=>$uid));
                 $entry = 0;
                 foreach ($results AS $result) {
// add an entry if there is no redirection in db table by calling redirect_save
//drupal_set_message(" rid in user_login_submit ".$result->uid);
//$tmp = var_export($result,TRUE);
//drupal_set_message(" result in user_login_submit ".$tmp);
                         if ($result->rid != 0)
                            $entry = $result->rid;
                   }
                   if ($entry == 0) {
                      $tmp = array();
                      $tmp['rid'] = '';
                      $tmp['uid'] = $uid;
                      $tmp['type'] = 'redirect';
                      $tmp['hash'] = '';
                      $tmp['source'] = 'user/'.$uid;
                      $tmp['source_options'] = array();
                      $tmp['redirect'] = 'dashboard/'.$uid;
                      $tmp['redirect_options'] = array();
                      $tmp['language'] = 'und';
                      $tmp['status_code'] = 0;
                      $tmp['override'] = false;
                      $redirect = (object)$tmp;
                      redirect_save($redirect);
                   }      
           }
}
/**
 * This is where match notification mails get sent
 **/
function _ghn_match_sendmail($nid,$matches,$type) {
         global $base_url;
         $fromnode = node_load($nid);
         $fromtitle = $fromnode->title;
         $fromuid = $fromnode->uid;
         $fromuser = user_load($fromuid);
         $frommail = $fromuser->mail;
         $fromdate = date("M j, Y H:i",$fromnode->created);
         $followlink = l("Matched ".$type." posting",$base_url."/node/".$nid);
         $type == "Need" ? $othertype = "Resource" : $othertype = "Need";
// now comes matching, check whether this has been matched
          $numbmatch = 0;
          foreach ($matches AS $match) {
              $numbmatch++;
              $tmp = explode(';',$match);
              $tonid = $tmp[1];
              $totitle = $tmp[3];
              $touid = $tmp[2];
// recepient subject
              $subject = "Match found for your ".$othertype." posting";
// recepient to address
              $touser = user_load($touid);
              $tomail = $touser->mail;
// recepient message
              $tonode = node_load($tonid);
              $todate = date("M j, Y H:i",$tonode->created);
	      $message = "Your ".$othertype." posting <strong>".$tonode->title."</stron> posted on ".$todate." has been matched with ".$type." posting <strong>".$fromtitle."</strong> posted on ".$fromdate.". Following link will help you to contact the members with matching ".$type.". ".$followlink;
              _ghn_simple_mail($subject, $message,$tomail); 
            }
// send one final email to the "tonode" author
// follow link
         $followlink = l("Matched ".$othertype." posting",$base_url."/match/".strtolower($type).'/'.$fromnode->uid.'/'.$nid);
// recepient subject
         $subject = "Match found for this ".$type." posting";
// recepient message
         $message = "Your ".$type." posting <strong>".$fromnode->title."</strong> posted on ".$fromdate." has ".$numbmatch." matching Resources. Following link will help you to contact the members with matching ".$othertype.". ".$followlink;
         _ghn_simple_mail($subject, $message,$frommail); 
}
/**
 * Sending matching notification mail
 **/
function _ghn_simple_mail($message_subject, $message_body,$to_email) {
  $my_email = 'info@globalheartnetwork.com';
  // These value can remain empty.
  $my_module = '';
  $my_mail_token = '';
  //$from = variable_get('system_mail', $my_email);
  $from = $my_email;
  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'to' => $to_email,
    'subject' => $message_subject,
    'body' => array($message_body),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system($my_module, $my_mail_token);
// The format function must be called before calling the mail function. 
  $message = $system->format($message);
  if ($system->mail($message)) {
    //drupal_set_message('_custom_simple_mail SUCCESS');
  }
  else {
    //drupal_set_message('_custom_simple_mail FAILURE');
  }
}
/** 
 * map test page
 **/
function ghn_map_test() {
   return " I AM IN GHN MODULE GHN MAP TEST ";
}
/** 
 * Called from Rules - after save maptest new content 
 **/
function ghn_map_lat_lang($nid,$node_type) {
// get address value for a given node_type
    $exist = 0;
    switch ($node_type) {
        case "conference_announcement":
           $results = db_query("SELECT field_conf_city_value AS town,field_conf_country_iso2 AS country FROM {field_data_field_conf_city} t LEFT JOIN {field_data_field_conf_country} c ON c.entity_id = t.entity_id WHERE c.entity_id = :nid AND t.bundle = :type",array(':nid'=>$nid,':type'=>'conference_announcement'));   
// check to see whether this is a new or existing content
           $temp = db_query("SELECT entity_id FROM {field_data_field_map_geo_location} WHERE entity_id = :nid",array(':nid'=>$nid));
           foreach ($temp AS $row) {
              if ($row->entity_id) $exist = 1;
           }
           break;
        case "hospital":
           $results = db_query("SELECT field_map_city_value AS town,field_phosp_country_iso2 AS country FROM {field_data_field_map_city} t LEFT JOIN {field_data_field_phosp_country} c ON c.entity_id = t.entity_id WHERE c.entity_id = :nid AND t.bundle = :type",array(':nid'=>$nid,':type'=>'hospital'));   
// check to see whether this is a new or existing content
           $temp = db_query("SELECT entity_id FROM {field_data_field_map_geo_location} WHERE entity_id = :nid",array(':nid'=>$nid));
           foreach ($temp AS $row) {
              if ($row->entity_id) $exist = 1;
           }
           break;
        case "medical_mission":
           $results = db_query("SELECT field_host_town_value AS town,field_mm_host_country_iso2 AS country FROM {field_data_field_host_town} t LEFT JOIN {field_data_field_mm_host_country} c ON c.entity_id = t.entity_id WHERE c.entity_id = :nid AND t.bundle = :type",array(':nid'=>$nid,':type'=>'medical_mission'));   
// check to see whether this is a new or existing content
           $temp = db_query("SELECT entity_id FROM {field_data_field_map_geo_location} WHERE entity_id = :nid",array(':nid'=>$nid));
           foreach ($temp AS $row) {
              if ($row->entity_id) $exist = 1;
           }
           break;
        case "need_post":
           $results = db_query("SELECT field_map_city_value AS town,field_post_country_iso2 AS country FROM {field_data_field_map_city} t LEFT JOIN {field_data_field_post_country} c ON c.entity_id = t.entity_id WHERE c.entity_id = :nid AND t.bundle = :type",array(':nid'=>$nid,':type'=>'need_post'));   
// check to see whether this is a new or existing content
           $temp = db_query("SELECT entity_id FROM {field_data_field_map_geo_location} WHERE entity_id = :nid",array(':nid'=>$nid));
           foreach ($temp AS $row) {
              if ($row->entity_id) $exist = 1;
           }
           break;
        case "resource_post":
           $results = db_query("SELECT field_map_city_value AS town,field_post_country_iso2 AS country FROM {field_data_field_map_city} t LEFT JOIN {field_data_field_post_country} c ON c.entity_id = t.entity_id WHERE c.entity_id = :nid AND t.bundle = :type",array(':nid'=>$nid,':type'=>'resource_post'));   
// check to see whether this is a new or existing content
           $temp = db_query("SELECT entity_id FROM {field_data_field_map_geo_location} WHERE entity_id = :nid",array(':nid'=>$nid));
           foreach ($temp AS $row) {
              if ($row->entity_id) $exist = 1;
           }
           break;
        case "map_test":
           $results = db_query("SELECT field_maptest_address_text_value AS address FROM {field_data_field_maptest_address_text} WHERE entity_id = :nid",array(':nid'=>$nid));   
           break;
    }
          foreach ($results AS $result) {
                 $geocode = geocoder('google',$result->town.','.$result->country);
                 foreach ($geocode AS $key => $value) {
                         if ($key == "coords") {
                            $lat = $value[1];
                            $lng = $value[0];
                            $lat_sin = sin(deg2rad($lat));
                            $lat_cos = cos(deg2rad($lat));
                            $lng_rad = deg2rad($lng);
// instert if it is a new content
if ($exist == 0) {
                            db_query("INSERT INTO {field_data_field_map_geo_location} (entity_type,bundle,deleted,entity_id,revision_id,language,delta,field_map_geo_location_lat,field_map_geo_location_lng,field_map_geo_location_lat_sin,field_map_geo_location_lat_cos,field_map_geo_location_lng_rad) VALUES ('node','$node_type',0,$nid,$nid,'und',0,$lat,$lng,$lat_sin,$lat_cos,$lng_rad)");
                            db_query("INSERT INTO {field_revision_field_map_geo_location} (entity_type,bundle,deleted,entity_id,revision_id,language,delta,field_map_geo_location_lat,field_map_geo_location_lng,field_map_geo_location_lat_sin,field_map_geo_location_lat_cos,field_map_geo_location_lng_rad) VALUES ('node','$node_type',0,$nid,$nid,'und',0,$lat,$lng,$lat_sin,$lat_cos,$lng_rad)");
}
else {
 // update the record - need to code this once i find more time for it.
}
                            break;
                         }
                   }
          }
         //drupal_set_message(" HELLO ".$temp.' GEOCODE: '.$temp1);
         print '<pre>';
         //print 'HOLLO '.$temp;
         print '</pre>';

} 
/**
 *This function builds an array of coordiantes and marker hover info. It is called 
 *from custom block node created for each of the top nav pages under Global Reach
 **/
function _ghn_map_array($type="medical_mission") {
  global $base_url;
  $str = '';
// get all the coordates from field_data_field_map_geo_location for given type
// get all the title, town, country for all the nodes associated with the coordinates
   $results = db_query("SELECT n.nid,n.title,t.field_host_town_value AS city,c.field_mm_host_country_iso2 AS country,l.field_map_geo_location_lng AS lng,l.field_map_geo_location_lat AS lat FROM {node} n LEFT JOIN {field_data_field_map_geo_location} l ON l.entity_id = n.nid LEFT JOIN {field_data_field_host_town} t ON t.entity_id = n.nid LEFT JOIN {field_data_field_mm_host_country} c ON c.entity_id = n.nid WHERE n.type = '$type' AND n.status = 1");
   foreach ($results AS $result) {
      $info = l($result->title,$base_url.'/node/'.$result->nid);
      $loc = $result->city.', '.$result->country;
      $lng = $result->lng;
      $lat = $result->lat;
      $str .= $info.'|'.$loc.'|'.$lng.'|'.$lat.';';
   }
   //$str = " I AM IN _ghn_map_array";
   echo $str;
}
